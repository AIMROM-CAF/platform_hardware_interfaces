/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.hardware.biometrics.fingerprint@2.2;

import @2.1::IBiometricsFingerprint;
import @2.1::RequestStatus;

interface IBiometricsFingerprint extends @2.1::IBiometricsFingerprint {
    /**
     * Fingerprint enroll request:
     * Switches the HAL state machine to collect and store a new fingerprint
     * template. Switches back as soon as enroll is complete, signalled by
     * (fingerprintMsg.type == FINGERPRINT_TEMPLATE_ENROLLING &&
     *  fingerprintMsg.data.enroll.samplesRemaining == 0)
     * or after timeoutSec seconds.
     * The fingerprint template must be assigned to the group gid.
     *
     * @param hat a valid Hardware Authentication Token (HAT), generated
     * as a result of a preEnroll() call.
     * @param gid a framework defined fingerprint set (group) id.
     * @param timeoutSec a timeout in seconds.
     * @param windowId optional ID of an illumination window for optical under
     * display fingerprint sensors. Must contain a null pointer if not used.
     *
     * @return debugErrno is a value the framework logs in case it is not 0.
     *
     * A notify() function may be called with a more detailed error structure.
     */
    enroll_2_2(vec<uint8_t> hat, uint32_t gid, uint32_t timeoutSec, handle windowId)
        generates (RequestStatus debugErrno);

    /**
     * Authenticates an operation identified by operationId
     *
     * @param operationId operation id.
     * @param gid fingerprint group id.
     * @param windowId optional ID of an illumination window for optical under
     * display fingerprint sensors. Must contain a null pointer if not used.
     *
     * @return debugErrno is a value the framework logs in case it is not 0.
     */
    authenticate_2_2(uint64_t operationId, uint32_t gid, handle windowId)
        generates (RequestStatus debugErrno);
};
